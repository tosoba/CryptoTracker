//
//  CryptocurrencyViewController.swift
//  CryptoTracker
//
//  Created by merengue on 17/03/2018.
//  Copyright (c) 2018 merengue. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class CurrenciesViewController: UIViewController {

    @IBOutlet weak var currenciesTableView: UITableView!
    @IBOutlet weak var currenciesSearchBar: UISearchBar!
    
    @IBAction func onSortingCurrenciesValueChanged(_ sender: UISegmentedControl) {
        switch (sender.selectedSegmentIndex) {
        case 0:
            filteredCurrencies = filteredCurrencies.sortedByPriceUSD()
        case 1:
            filteredCurrencies = filteredCurrencies.sortedByChange1H()
        case 2:
            filteredCurrencies = filteredCurrencies.sortedByChange24H()
        case 3:
            filteredCurrencies = filteredCurrencies.sortedByChange7D()
        default:
            break
        }
        currenciesTableView.reloadData()
    }

    private var currencies: [Currency] = []
    private var filteredCurrencies: [Currency] = []
    
    // MARK: - Public properties -

    var presenter: CurrenciesPresenterInterface!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        currenciesTableView.dataSource = self
        currenciesTableView.delegate = self
        loadCurrencies()
    }
    
    // MARK: - Private methods -
    
    private func loadCurrencies() {
        presenter.loadCurrencies()
    }
}

// MARK: - Extensions -

extension CurrenciesViewController: CurrenciesViewInterface {
    func updateCurrencies(_ currencies: [Currency]) {
        self.currencies.append(contentsOf: currencies)
        self.filteredCurrencies = self.currencies
        DispatchQueue.main.async {
            self.currenciesTableView.reloadData()
        }
    }
}

extension CurrenciesViewController: UITableViewDelegate {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 75
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let selectedCurrency = filteredCurrencies[indexPath.row]
        presenter.openCurrencyDetail(for: selectedCurrency)
    }
}

extension CurrenciesViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return filteredCurrencies.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let currency = filteredCurrencies[indexPath.row]
        let imageLink = "\(Currency.baseSymbolURL)\(currency.symbol.lowercased()).png"

        let cell = currenciesTableView.dequeueReusableCell(withIdentifier: "CurrencyCell", for: indexPath) as! CurrencyTableViewCell
        cell.symbolAndNameLabel.text = "\(currency.symbol) | \(currency.name)"
        cell.currencyImageView.setImageToDownloaded(from: imageLink)
        cell.priceUSDLabel.text = "\(currency.priceUSD)$"
        cell.change1HLabel.text = "\(currency.change1H)%"
        cell.change24HLabel.text = "\(currency.change24H)%"
        cell.change7DLabel.text = "\(currency.change7D)%"
        cell.updateTextColors()

        return cell
    }
}

extension CurrenciesViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        filteredCurrencies = searchText.isEmpty ? currencies : currencies.filter({(currency: Currency) -> Bool in
            return currency.name.range(of: searchText, options: .caseInsensitive) != nil || currency.symbol.range(of: searchText, options: .caseInsensitive) != nil
        })
        
        currenciesTableView.reloadData()
    }
}
